package cn.et.lesson03.food.entity;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class StudentExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public StudentExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        public void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        public void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        public void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andSIsNull() {
            addCriterion("S# is null");
            return (Criteria) this;
        }

        public Criteria andSIsNotNull() {
            addCriterion("S# is not null");
            return (Criteria) this;
        }

        public Criteria andSEqualTo(BigDecimal value) {
            addCriterion("S# =", value, "s");
            return (Criteria) this;
        }

        public Criteria andSNotEqualTo(BigDecimal value) {
            addCriterion("S# <>", value, "s");
            return (Criteria) this;
        }

        public Criteria andSGreaterThan(BigDecimal value) {
            addCriterion("S# >", value, "s");
            return (Criteria) this;
        }

        public Criteria andSGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("S# >=", value, "s");
            return (Criteria) this;
        }

        public Criteria andSLessThan(BigDecimal value) {
            addCriterion("S# <", value, "s");
            return (Criteria) this;
        }

        public Criteria andSLessThanOrEqualTo(BigDecimal value) {
            addCriterion("S# <=", value, "s");
            return (Criteria) this;
        }

        public Criteria andSIn(List<BigDecimal> values) {
            addCriterion("S# in", values, "s");
            return (Criteria) this;
        }

        public Criteria andSNotIn(List<BigDecimal> values) {
            addCriterion("S# not in", values, "s");
            return (Criteria) this;
        }

        public Criteria andSBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("S# between", value1, value2, "s");
            return (Criteria) this;
        }

        public Criteria andSNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("S# not between", value1, value2, "s");
            return (Criteria) this;
        }

        public Criteria andSnameIsNull() {
            addCriterion("SNAME is null");
            return (Criteria) this;
        }

        public Criteria andSnameIsNotNull() {
            addCriterion("SNAME is not null");
            return (Criteria) this;
        }

        public Criteria andSnameEqualTo(String value) {
            addCriterion("SNAME =", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameNotEqualTo(String value) {
            addCriterion("SNAME <>", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameGreaterThan(String value) {
            addCriterion("SNAME >", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameGreaterThanOrEqualTo(String value) {
            addCriterion("SNAME >=", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameLessThan(String value) {
            addCriterion("SNAME <", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameLessThanOrEqualTo(String value) {
            addCriterion("SNAME <=", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameLike(String value) {
            addCriterion("SNAME like", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameNotLike(String value) {
            addCriterion("SNAME not like", value, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameIn(List<String> values) {
            addCriterion("SNAME in", values, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameNotIn(List<String> values) {
            addCriterion("SNAME not in", values, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameBetween(String value1, String value2) {
            addCriterion("SNAME between", value1, value2, "sname");
            return (Criteria) this;
        }

        public Criteria andSnameNotBetween(String value1, String value2) {
            addCriterion("SNAME not between", value1, value2, "sname");
            return (Criteria) this;
        }

        public Criteria andSageIsNull() {
            addCriterion("SAGE is null");
            return (Criteria) this;
        }

        public Criteria andSageIsNotNull() {
            addCriterion("SAGE is not null");
            return (Criteria) this;
        }

        public Criteria andSageEqualTo(BigDecimal value) {
            addCriterion("SAGE =", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageNotEqualTo(BigDecimal value) {
            addCriterion("SAGE <>", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageGreaterThan(BigDecimal value) {
            addCriterion("SAGE >", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("SAGE >=", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageLessThan(BigDecimal value) {
            addCriterion("SAGE <", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageLessThanOrEqualTo(BigDecimal value) {
            addCriterion("SAGE <=", value, "sage");
            return (Criteria) this;
        }

        public Criteria andSageIn(List<BigDecimal> values) {
            addCriterion("SAGE in", values, "sage");
            return (Criteria) this;
        }

        public Criteria andSageNotIn(List<BigDecimal> values) {
            addCriterion("SAGE not in", values, "sage");
            return (Criteria) this;
        }

        public Criteria andSageBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("SAGE between", value1, value2, "sage");
            return (Criteria) this;
        }

        public Criteria andSageNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("SAGE not between", value1, value2, "sage");
            return (Criteria) this;
        }

        public Criteria andSsexIsNull() {
            addCriterion("SEX is null");
            return (Criteria) this;
        }

        public Criteria andSEXIsNotNull() {
            addCriterion("SEX is not null");
            return (Criteria) this;
        }

        public Criteria andSEXEqualTo(String value) {
            addCriterion("SEX =", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXNotEqualTo(String value) {
            addCriterion("SEX <>", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXGreaterThan(String value) {
            addCriterion("SEX >", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXGreaterThanOrEqualTo(String value) {
            addCriterion("SEX >=", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXLessThan(String value) {
            addCriterion("SEX <", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXLessThanOrEqualTo(String value) {
            addCriterion("SEX <=", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXLike(String value) {
            addCriterion("SEX like", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXNotLike(String value) {
            addCriterion("SEX not like", value, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXIn(List<String> values) {
            addCriterion("SEX in", values, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXNotIn(List<String> values) {
            addCriterion("SEX not in", values, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXBetween(String value1, String value2) {
            addCriterion("SEX between", value1, value2, "SEX");
            return (Criteria) this;
        }

        public Criteria andSEXNotBetween(String value1, String value2) {
            addCriterion("SEX not between", value1, value2, "SEX");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table STUDENT
     *
     * @mbg.generated do_not_delete_during_merge Wed Nov 29 22:30:47 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table STUDENT
     *
     * @mbg.generated Wed Nov 29 22:30:47 CST 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}